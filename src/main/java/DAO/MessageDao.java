package DAO;

import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

import Model.Message;

public interface MessageDao {

    /**
     * Adds a new message to a database.
     * 
     * @param message The new message to add, which contains the poster's ID, message text, and time of posting.
     * @return The same Message object passed into this method, but with an ID generated by the database.
     * @throws SQLException If there is an issue with the database.
     */
    Message addMessage(Message message) throws SQLException;

    /**
     * Gets all messages from a database.  If there are no messages, then the list is empty.
     * 
     * @return List containing Messages that exist in the database.
     * @throws SQLException If there is an issue with the database.
     */
    List<Message> getAllMessages() throws SQLException;

    /**
     * Gets all messages from a database that belong to a particular user.
     * If there are no messages or if the account doesn't exist, then the returned list will be empty.
     * 
     * @param accountId The account ID of the user of the messages to retrieve.
     * @return List containing Messages from a particular user.
     * @throws SQLException If there is an issue with the database.
     */
    List<Message> getAllMessages(int accountId) throws SQLException;

    /**
     * Gets a message from a database by using message ID.  If the message does not exist, return an empty Optional.
     * 
     * @param messageId The message ID of the message to retrieve.
     * @return A Message object with ID, poster ID, message text, and time of posting.
     * @throws SQLException If there is an issue with the database.
     */
    Optional<Message> getMessage(int messageId) throws SQLException;

    /**
     * Deletes a message from a database by using message ID.  If the message doesn't exist, nothing happens.
     * 
     * @param messageId The message ID of the message to delete.
     * @throws SQLException If there is an issue with the database.
     */
    void deleteMessage(int messageId) throws SQLException;

    /**
     * Updates a message's text in a database, belonging to the provided message ID.  If the message doesn't exist,
     *  nothing happens.
     * 
     * @param messageId The message ID of the message to update.
     * @param messageText The text that will replace the original message text.
     * @throws SQLException If there is an issue with the database.
     */
    void updateMessage(int messageId, String messageText) throws SQLException;
}
